import secrets
import string 
import hashlib
from getpass import getpass

USER_DETAILS_FILEPATH = "users.txt"
PUNCTUATIONS = "@#$%&"
DEFAULT_PASSWORD_LENGTH = 12
INVALID_LENGTH_MESSAGE = f'''
Password length. It must be a number with a length between 8 and 16. 
Generating password with a default length of {DEFAULT_PASSWORD_LENGTH} characters.'''
salt="randomvalue"

def generate_password(length=12):
    characters = string.ascii_letters + string.digits +PUNCTUATIONS
    pwd = ''.join(secrets.choice(characters) for _ in range(length))
    return pwd

def hash_password(password):
    """Hashing password with SHA-256 alogrithm"""
    password_bytes = password.encode('utf-8')
    hashed_password = hashlib.sha256(password_bytes).hexdigest() + str(salt.encode('utf-8'))
    return hashed_password

def save_user(username,hashed_password):
    """Saving user-details to the users detail file"""
    with open(USER_DETAILS_FILEPATH, "a") as f:
        f.write(f"{username} {hashed_password}\n")

def check_user(username):
    try:
        with open(USER_DETAILS_FILEPATH,"r") as f:
            for line in f:
                parts = line.split()
                if parts[0] == username:
                    return True
    except FileNotFoundError as fl_err:
        print(f"{fl_err.args[-1]}:{USER_DETAILS_FILEPATH}")
        print(f"System will create file: {USER_DETAILS_FILEPATH}")
        return False
    
def authenticate_user(username,password):
    with open(USER_DETAILS_FILEPATH,"r") as f :
        for line in f:
            parts = line.split()
            if parts[0] == username:
                hashed_password = parts[1]
                if hashed_password == hash_password(password):
                    return True
                else:
                    return False
    return False

def validate_input(password_length):
    """To validate input"""
    try:
        password_length = int(password_length)
        if password_length < 8 or password_length > 16:
            raise ValueError("Password length must be between 8 and 16")
        return password_length
    except ValueError:
        print(INVALID_LENGTH_MESSAGE)
        return DEFAULT_PASSWORD_LENGTH
    
def register():
    username = input("Enter your username:")
    if check_user(username):
        print("User already exist")
        return
    length = input("Enter Auto Generated Password Length (number 8-16):")
    length = validate_input (length)
    password = generate_password(length)

    hashed_password = hash_password(password)
    save_user(username,hashed_password)
    print("Account created successfully.")
    print("Your password is: ", password)

def login():
    username = input("Enter username: ")
    if not check_user(username):
        print("This account does not exist")
        return
    password = input("Enter password: ")
    if not authenticate_user(username,password):
        print("Incorrect password.")
        return
    print("Login successful.")


def main():
    while True:
        print("1. Register\n2. Login\n3. Exit")
        choice = int(input("Enter your choice: "))
        if choice == 1:
            register()
        elif choice == 2:
            login()
        elif choice == 3:
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main()

